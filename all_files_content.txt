File names/paths and their content
Filename: ./obj/project.assets.json
-----------------------------------
{
  "version": 3,
  "targets": {
    "net8.0": {
      "Microsoft.AspNetCore.Authentication.JwtBearer/8.0.7": {
        "type": "package",
        "dependencies": {
          "Microsoft.IdentityModel.Protocols.OpenIdConnect": "7.1.2"
        },
        "compile": {
          "lib/net8.0/Microsoft.AspNetCore.Authentication.JwtBearer.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.AspNetCore.Authentication.JwtBearer.dll": {
            "related": ".xml"
          }
        },
        "frameworkReferences": [
          "Microsoft.AspNetCore.App"
        ]
      },
      "Microsoft.AspNetCore.OpenApi/8.0.4": {
        "type": "package",
        "dependencies": {
          "Microsoft.OpenApi": "1.4.3"
        },
        "compile": {
          "lib/net8.0/Microsoft.AspNetCore.OpenApi.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.AspNetCore.OpenApi.dll": {
            "related": ".xml"
          }
        },
        "frameworkReferences": [
          "Microsoft.AspNetCore.App"
        ]
      },
      "Microsoft.Extensions.ApiDescription.Server/6.0.5": {
        "type": "package",
        "build": {
          "build/Microsoft.Extensions.ApiDescription.Server.props": {},
          "build/Microsoft.Extensions.ApiDescription.Server.targets": {}
        },
        "buildMultiTargeting": {
          "buildMultiTargeting/Microsoft.Extensions.ApiDescription.Server.props": {},
          "buildMultiTargeting/Microsoft.Extensions.ApiDescription.Server.targets": {}
        }
      },
      "Microsoft.IdentityModel.Abstractions/7.1.2": {
        "type": "package",
        "compile": {
          "lib/net8.0/Microsoft.IdentityModel.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.IdentityModel.Abstractions.dll": {
            "related": ".xml"
          }
        }
      },
      "Microsoft.IdentityModel.JsonWebTokens/7.1.2": {
        "type": "package",
        "dependencies": {
          "Microsoft.IdentityModel.Tokens": "7.1.2"
        },
        "compile": {
          "lib/net8.0/Microsoft.IdentityModel.JsonWebTokens.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.IdentityModel.JsonWebTokens.dll": {
            "related": ".xml"
          }
        }
      },
      "Microsoft.IdentityModel.Logging/7.1.2": {
        "type": "package",
        "dependencies": {
          "Microsoft.IdentityModel.Abstractions": "7.1.2"
        },
        "compile": {
          "lib/net8.0/Microsoft.IdentityModel.Logging.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.IdentityModel.Logging.dll": {
            "related": ".xml"
          }
        }
      },
      "Microsoft.IdentityModel.Protocols/7.1.2": {
        "type": "package",
        "dependencies": {
          "Microsoft.IdentityModel.Logging": "7.1.2",
          "Microsoft.IdentityModel.Tokens": "7.1.2"
        },
        "compile": {
          "lib/net8.0/Microsoft.IdentityModel.Protocols.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.IdentityModel.Protocols.dll": {
            "related": ".xml"
          }
        }
      },
      "Microsoft.IdentityModel.Protocols.OpenIdConnect/7.1.2": {
        "type": "package",
        "dependencies": {
          "Microsoft.IdentityModel.Protocols": "7.1.2",
          "System.IdentityModel.Tokens.Jwt": "7.1.2"
        },
        "compile": {
          "lib/net8.0/Microsoft.IdentityModel.Protocols.OpenIdConnect.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.IdentityModel.Protocols.OpenIdConnect.dll": {
            "related": ".xml"
          }
        }
      },
      "Microsoft.IdentityModel.Tokens/7.1.2": {
        "type": "package",
        "dependencies": {
          "Microsoft.IdentityModel.Logging": "7.1.2"
        },
        "compile": {
          "lib/net8.0/Microsoft.IdentityModel.Tokens.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.IdentityModel.Tokens.dll": {
            "related": ".xml"
          }
        }
      },
      "Microsoft.OpenApi/1.4.3": {
        "type": "package",
        "compile": {
          "lib/netstandard2.0/Microsoft.OpenApi.dll": {
            "related": ".pdb;.xml"
          }
        },
        "runtime": {
          "lib/netstandard2.0/Microsoft.OpenApi.dll": {
            "related": ".pdb;.xml"
          }
        }
      },
      "Swashbuckle.AspNetCore/6.4.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.ApiDescription.Server": "6.0.5",
          "Swashbuckle.AspNetCore.Swagger": "6.4.0",
          "Swashbuckle.AspNetCore.SwaggerGen": "6.4.0",
          "Swashbuckle.AspNetCore.SwaggerUI": "6.4.0"
        },
        "build": {
          "build/Swashbuckle.AspNetCore.props": {}
        }
      },
      "Swashbuckle.AspNetCore.Swagger/6.4.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.OpenApi": "1.2.3"
        },
        "compile": {
          "lib/net6.0/Swashbuckle.AspNetCore.Swagger.dll": {
            "related": ".pdb;.xml"
          }
        },
        "runtime": {
          "lib/net6.0/Swashbuckle.AspNetCore.Swagger.dll": {
            "related": ".pdb;.xml"
          }
        },
        "frameworkReferences": [
          "Microsoft.AspNetCore.App"
        ]
      },
      "Swashbuckle.AspNetCore.SwaggerGen/6.4.0": {
        "type": "package",
        "dependencies": {
          "Swashbuckle.AspNetCore.Swagger": "6.4.0"
        },
        "compile": {
          "lib/net6.0/Swashbuckle.AspNetCore.SwaggerGen.dll": {
            "related": ".pdb;.xml"
          }
        },
        "runtime": {
          "lib/net6.0/Swashbuckle.AspNetCore.SwaggerGen.dll": {
            "related": ".pdb;.xml"
          }
        }
      },
      "Swashbuckle.AspNetCore.SwaggerUI/6.4.0": {
        "type": "package",
        "compile": {
          "lib/net6.0/Swashbuckle.AspNetCore.SwaggerUI.dll": {
            "related": ".pdb;.xml"
          }
        },
        "runtime": {
          "lib/net6.0/Swashbuckle.AspNetCore.SwaggerUI.dll": {
            "related": ".pdb;.xml"
          }
        },
        "frameworkReferences": [
          "Microsoft.AspNetCore.App"
        ]
      },
      "System.IdentityModel.Tokens.Jwt/7.1.2": {
        "type": "package",
        "dependencies": {
          "Microsoft.IdentityModel.JsonWebTokens": "7.1.2",
          "Microsoft.IdentityModel.Tokens": "7.1.2"
        },
        "compile": {
          "lib/net8.0/System.IdentityModel.Tokens.Jwt.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/System.IdentityModel.Tokens.Jwt.dll": {
            "related": ".xml"
          }
        }
      }
    }
  },
  "libraries": {
    "Microsoft.AspNetCore.Authentication.JwtBearer/8.0.7": {
      "sha512": "HXcmJizLBx9mP2XtHZZgvi3GZCrGg98PMQ9AozrF1/RqSffp9CqCiTdrz7TaFLqOUph/S4hqx/IJD18Al+zE+w==",
      "type": "package",
      "path": "microsoft.aspnetcore.authentication.jwtbearer/8.0.7",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "THIRD-PARTY-NOTICES.TXT",
        "lib/net8.0/Microsoft.AspNetCore.Authentication.JwtBearer.dll",
        "lib/net8.0/Microsoft.AspNetCore.Authentication.JwtBearer.xml",
        "microsoft.aspnetcore.authentication.jwtbearer.8.0.7.nupkg.sha512",
        "microsoft.aspnetcore.authentication.jwtbearer.nuspec"
      ]
    },
    "Microsoft.AspNetCore.OpenApi/8.0.4": {
      "sha512": "TFiXbP0tqRgJKcpiCSSp79q6QaiF8gqRhZgrU48FQajhVkiwHSp1O1b1hkYC4Ehl4clbk3pHwdfwN9mRtDAFbQ==",
      "type": "package",
      "path": "microsoft.aspnetcore.openapi/8.0.4",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "THIRD-PARTY-NOTICES.TXT",
        "lib/net8.0/Microsoft.AspNetCore.OpenApi.dll",
        "lib/net8.0/Microsoft.AspNetCore.OpenApi.xml",
        "microsoft.aspnetcore.openapi.8.0.4.nupkg.sha512",
        "microsoft.aspnetcore.openapi.nuspec"
      ]
    },
    "Microsoft.Extensions.ApiDescription.Server/6.0.5": {
      "sha512": "Ckb5EDBUNJdFWyajfXzUIMRkhf52fHZOQuuZg/oiu8y7zDCVwD0iHhew6MnThjHmevanpxL3f5ci2TtHQEN6bw==",
      "type": "package",
      "path": "microsoft.extensions.apidescription.server/6.0.5",
      "hasTools": true,
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "build/Microsoft.Extensions.ApiDescription.Server.props",
        "build/Microsoft.Extensions.ApiDescription.Server.targets",
        "buildMultiTargeting/Microsoft.Extensions.ApiDescription.Server.props",
        "buildMultiTargeting/Microsoft.Extensions.ApiDescription.Server.targets",
        "microsoft.extensions.apidescription.server.6.0.5.nupkg.sha512",
        "microsoft.extensions.apidescription.server.nuspec",
        "tools/Newtonsoft.Json.dll",
        "tools/dotnet-getdocument.deps.json",
        "tools/dotnet-getdocument.dll",
        "tools/dotnet-getdocument.runtimeconfig.json",
        "tools/net461-x86/GetDocument.Insider.exe",
        "tools/net461-x86/GetDocument.Insider.exe.config",
        "tools/net461-x86/Microsoft.Win32.Primitives.dll",
        "tools/net461-x86/System.AppContext.dll",
        "tools/net461-x86/System.Buffers.dll",
        "tools/net461-x86/System.Collections.Concurrent.dll",
        "tools/net461-x86/System.Collections.NonGeneric.dll",
        "tools/net461-x86/System.Collections.Specialized.dll",
        "tools/net461-x86/System.Collections.dll",
        "tools/net461-x86/System.ComponentModel.EventBasedAsync.dll",
        "tools/net461-x86/System.ComponentModel.Primitives.dll",
        "tools/net461-x86/System.ComponentModel.TypeConverter.dll",
        "tools/net461-x86/System.ComponentModel.dll",
        "tools/net461-x86/System.Console.dll",
        "tools/net461-x86/System.Data.Common.dll",
        "tools/net461-x86/System.Diagnostics.Contracts.dll",
        "tools/net461-x86/System.Diagnostics.Debug.dll",
        "tools/net461-x86/System.Diagnostics.DiagnosticSource.dll",
        "tools/net461-x86/System.Diagnostics.FileVersionInfo.dll",
        "tools/net461-x86/System.Diagnostics.Process.dll",
        "tools/net461-x86/System.Diagnostics.StackTrace.dll",
        "tools/net461-x86/System.Diagnostics.TextWriterTraceListener.dll",
        "tools/net461-x86/System.Diagnostics.Tools.dll",
        "tools/net461-x86/System.Diagnostics.TraceSource.dll",
        "tools/net461-x86/System.Diagnostics.Tracing.dll",
        "tools/net461-x86/System.Drawing.Primitives.dll",
        "tools/net461-x86/System.Dynamic.Runtime.dll",
        "tools/net461-x86/System.Globalization.Calendars.dll",
        "tools/net461-x86/System.Globalization.Extensions.dll",
        "tools/net461-x86/System.Globalization.dll",
        "tools/net461-x86/System.IO.Compression.ZipFile.dll",
        "tools/net461-x86/System.IO.Compression.dll",
        "tools/net461-x86/System.IO.FileSystem.DriveInfo.dll",
        "tools/net461-x86/System.IO.FileSystem.Primitives.dll",
        "tools/net461-x86/System.IO.FileSystem.Watcher.dll",
        "tools/net461-x86/System.IO.FileSystem.dll",
        "tools/net461-x86/System.IO.IsolatedStorage.dll",
        "tools/net461-x86/System.IO.MemoryMappedFiles.dll",
        "tools/net461-x86/System.IO.Pipes.dll",
        "tools/net461-x86/System.IO.UnmanagedMemoryStream.dll",
        "tools/net461-x86/System.IO.dll",
        "tools/net461-x86/System.Linq.Expressions.dll",
        "tools/net461-x86/System.Linq.Parallel.dll",
        "tools/net461-x86/System.Linq.Queryable.dll",
        "tools/net461-x86/System.Linq.dll",
        "tools/net461-x86/System.Memory.dll",
        "tools/net461-x86/System.Net.Http.dll",
        "tools/net461-x86/System.Net.NameResolution.dll",
        "tools/net461-x86/System.Net.NetworkInformation.dll",
        "tools/net461-x86/System.Net.Ping.dll",
        "tools/net461-x86/System.Net.Primitives.dll",
        "tools/net461-x86/System.Net.Requests.dll",
        "tools/net461-x86/System.Net.Security.dll",
        "tools/net461-x86/System.Net.Sockets.dll",
        "tools/net461-x86/System.Net.WebHeaderCollection.dll",
        "tools/net461-x86/System.Net.WebSockets.Client.dll",
        "tools/net461-x86/System.Net.WebSockets.dll",
        "tools/net461-x86/System.Numerics.Vectors.dll",
        "tools/net461-x86/System.ObjectModel.dll",
        "tools/net461-x86/System.Reflection.Extensions.dll",
        "tools/net461-x86/System.Reflection.Primitives.dll",
        "tools/net461-x86/System.Reflection.dll",
        "tools/net461-x86/System.Resources.Reader.dll",
        "tools/net461-x86/System.Resources.ResourceManager.dll",
        "tools/net461-x86/System.Resources.Writer.dll",
        "tools/net461-x86/System.Runtime.CompilerServices.Unsafe.dll",
        "tools/net461-x86/System.Runtime.CompilerServices.VisualC.dll",
        "tools/net461-x86/System.Runtime.Extensions.dll",
        "tools/net461-x86/System.Runtime.Handles.dll",
        "tools/net461-x86/System.Runtime.InteropServices.RuntimeInformation.dll",
        "tools/net461-x86/System.Runtime.InteropServices.dll",
        "tools/net461-x86/System.Runtime.Numerics.dll",
        "tools/net461-x86/System.Runtime.Serialization.Formatters.dll",
        "tools/net461-x86/System.Runtime.Serialization.Json.dll",
        "tools/net461-x86/System.Runtime.Serialization.Primitives.dll",
        "tools/net461-x86/System.Runtime.Serialization.Xml.dll",
        "tools/net461-x86/System.Runtime.dll",
        "tools/net461-x86/System.Security.Claims.dll",
        "tools/net461-x86/System.Security.Cryptography.Algorithms.dll",
        "tools/net461-x86/System.Security.Cryptography.Csp.dll",
        "tools/net461-x86/System.Security.Cryptography.Encoding.dll",
        "tools/net461-x86/System.Security.Cryptography.Primitives.dll",
        "tools/net461-x86/System.Security.Cryptography.X509Certificates.dll",
        "tools/net461-x86/System.Security.Principal.dll",
        "tools/net461-x86/System.Security.SecureString.dll",
        "tools/net461-x86/System.Text.Encoding.Extensions.dll",
        "tools/net461-x86/System.Text.Encoding.dll",
        "tools/net461-x86/System.Text.RegularExpressions.dll",
        "tools/net461-x86/System.Threading.Overlapped.dll",
        "tools/net461-x86/System.Threading.Tasks.Parallel.dll",
        "tools/net461-x86/System.Threading.Tasks.dll",
        "tools/net461-x86/System.Threading.Thread.dll",
        "tools/net461-x86/System.Threading.ThreadPool.dll",
        "tools/net461-x86/System.Threading.Timer.dll",
        "tools/net461-x86/System.Threading.dll",
        "tools/net461-x86/System.ValueTuple.dll",
        "tools/net461-x86/System.Xml.ReaderWriter.dll",
        "tools/net461-x86/System.Xml.XDocument.dll",
        "tools/net461-x86/System.Xml.XPath.XDocument.dll",
        "tools/net461-x86/System.Xml.XPath.dll",
        "tools/net461-x86/System.Xml.XmlDocument.dll",
        "tools/net461-x86/System.Xml.XmlSerializer.dll",
        "tools/net461-x86/netstandard.dll",
        "tools/net461/GetDocument.Insider.exe",
        "tools/net461/GetDocument.Insider.exe.config",
        "tools/net461/Microsoft.Win32.Primitives.dll",
        "tools/net461/System.AppContext.dll",
        "tools/net461/System.Buffers.dll",
        "tools/net461/System.Collections.Concurrent.dll",
        "tools/net461/System.Collections.NonGeneric.dll",
        "tools/net461/System.Collections.Specialized.dll",
        "tools/net461/System.Collections.dll",
        "tools/net461/System.ComponentModel.EventBasedAsync.dll",
        "tools/net461/System.ComponentModel.Primitives.dll",
        "tools/net461/System.ComponentModel.TypeConverter.dll",
        "tools/net461/System.ComponentModel.dll",
        "tools/net461/System.Console.dll",
        "tools/net461/System.Data.Common.dll",
        "tools/net461/System.Diagnostics.Contracts.dll",
        "tools/net461/System.Diagnostics.Debug.dll",
        "tools/net461/System.Diagnostics.DiagnosticSource.dll",
        "tools/net461/System.Diagnostics.FileVersionInfo.dll",
        "tools/net461/System.Diagnostics.Process.dll",
        "tools/net461/System.Diagnostics.StackTrace.dll",
        "tools/net461/System.Diagnostics.TextWriterTraceListener.dll",
        "tools/net461/System.Diagnostics.Tools.dll",
        "tools/net461/System.Diagnostics.TraceSource.dll",
        "tools/net461/System.Diagnostics.Tracing.dll",
        "tools/net461/System.Drawing.Primitives.dll",
        "tools/net461/System.Dynamic.Runtime.dll",
        "tools/net461/System.Globalization.Calendars.dll",
        "tools/net461/System.Globalization.Extensions.dll",
        "tools/net461/System.Globalization.dll",
        "tools/net461/System.IO.Compression.ZipFile.dll",
        "tools/net461/System.IO.Compression.dll",
        "tools/net461/System.IO.FileSystem.DriveInfo.dll",
        "tools/net461/System.IO.FileSystem.Primitives.dll",
        "tools/net461/System.IO.FileSystem.Watcher.dll",
        "tools/net461/System.IO.FileSystem.dll",
        "tools/net461/System.IO.IsolatedStorage.dll",
        "tools/net461/System.IO.MemoryMappedFiles.dll",
        "tools/net461/System.IO.Pipes.dll",
        "tools/net461/System.IO.UnmanagedMemoryStream.dll",
        "tools/net461/System.IO.dll",
        "tools/net461/System.Linq.Expressions.dll",
        "tools/net461/System.Linq.Parallel.dll",
        "tools/net461/System.Linq.Queryable.dll",
        "tools/net461/System.Linq.dll",
        "tools/net461/System.Memory.dll",
        "tools/net461/System.Net.Http.dll",
        "tools/net461/System.Net.NameResolution.dll",
        "tools/net461/System.Net.NetworkInformation.dll",
        "tools/net461/System.Net.Ping.dll",
        "tools/net461/System.Net.Primitives.dll",
        "tools/net461/System.Net.Requests.dll",
        "tools/net461/System.Net.Security.dll",
        "tools/net461/System.Net.Sockets.dll",
        "tools/net461/System.Net.WebHeaderCollection.dll",
        "tools/net461/System.Net.WebSockets.Client.dll",
        "tools/net461/System.Net.WebSockets.dll",
        "tools/net461/System.Numerics.Vectors.dll",
        "tools/net461/System.ObjectModel.dll",
        "tools/net461/System.Reflection.Extensions.dll",
        "tools/net461/System.Reflection.Primitives.dll",
        "tools/net461/System.Reflection.dll",
        "tools/net461/System.Resources.Reader.dll",
        "tools/net461/System.Resources.ResourceManager.dll",
        "tools/net461/System.Resources.Writer.dll",
        "tools/net461/System.Runtime.CompilerServices.Unsafe.dll",
        "tools/net461/System.Runtime.CompilerServices.VisualC.dll",
        "tools/net461/System.Runtime.Extensions.dll",
        "tools/net461/System.Runtime.Handles.dll",
        "tools/net461/System.Runtime.InteropServices.RuntimeInformation.dll",
        "tools/net461/System.Runtime.InteropServices.dll",
        "tools/net461/System.Runtime.Numerics.dll",
        "tools/net461/System.Runtime.Serialization.Formatters.dll",
        "tools/net461/System.Runtime.Serialization.Json.dll",
        "tools/net461/System.Runtime.Serialization.Primitives.dll",
        "tools/net461/System.Runtime.Serialization.Xml.dll",
        "tools/net461/System.Runtime.dll",
        "tools/net461/System.Security.Claims.dll",
        "tools/net461/System.Security.Cryptography.Algorithms.dll",
        "tools/net461/System.Security.Cryptography.Csp.dll",
        "tools/net461/System.Security.Cryptography.Encoding.dll",
        "tools/net461/System.Security.Cryptography.Primitives.dll",
        "tools/net461/System.Security.Cryptography.X509Certificates.dll",
        "tools/net461/System.Security.Principal.dll",
        "tools/net461/System.Security.SecureString.dll",
        "tools/net461/System.Text.Encoding.Extensions.dll",
        "tools/net461/System.Text.Encoding.dll",
        "tools/net461/System.Text.RegularExpressions.dll",
        "tools/net461/System.Threading.Overlapped.dll",
        "tools/net461/System.Threading.Tasks.Parallel.dll",
        "tools/net461/System.Threading.Tasks.dll",
        "tools/net461/System.Threading.Thread.dll",
        "tools/net461/System.Threading.ThreadPool.dll",
        "tools/net461/System.Threading.Timer.dll",
        "tools/net461/System.Threading.dll",
        "tools/net461/System.ValueTuple.dll",
        "tools/net461/System.Xml.ReaderWriter.dll",
        "tools/net461/System.Xml.XDocument.dll",
        "tools/net461/System.Xml.XPath.XDocument.dll",
        "tools/net461/System.Xml.XPath.dll",
        "tools/net461/System.Xml.XmlDocument.dll",
        "tools/net461/System.Xml.XmlSerializer.dll",
        "tools/net461/netstandard.dll",
        "tools/netcoreapp2.1/GetDocument.Insider.deps.json",
        "tools/netcoreapp2.1/GetDocument.Insider.dll",
        "tools/netcoreapp2.1/GetDocument.Insider.runtimeconfig.json",
        "tools/netcoreapp2.1/System.Diagnostics.DiagnosticSource.dll"
      ]
    },
    "Microsoft.IdentityModel.Abstractions/7.1.2": {
      "sha512": "33eTIA2uO/L9utJjZWbKsMSVsQf7F8vtd6q5mQX7ZJzNvCpci5fleD6AeANGlbbb7WX7XKxq9+Dkb5e3GNDrmQ==",
      "type": "package",
      "path": "microsoft.identitymodel.abstractions/7.1.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/net461/Microsoft.IdentityModel.Abstractions.dll",
        "lib/net461/Microsoft.IdentityModel.Abstractions.xml",
        "lib/net462/Microsoft.IdentityModel.Abstractions.dll",
        "lib/net462/Microsoft.IdentityModel.Abstractions.xml",
        "lib/net472/Microsoft.IdentityModel.Abstractions.dll",
        "lib/net472/Microsoft.IdentityModel.Abstractions.xml",
        "lib/net6.0/Microsoft.IdentityModel.Abstractions.dll",
        "lib/net6.0/Microsoft.IdentityModel.Abstractions.xml",
        "lib/net8.0/Microsoft.IdentityModel.Abstractions.dll",
        "lib/net8.0/Microsoft.IdentityModel.Abstractions.xml",
        "lib/netstandard2.0/Microsoft.IdentityModel.Abstractions.dll",
        "lib/netstandard2.0/Microsoft.IdentityModel.Abstractions.xml",
        "microsoft.identitymodel.abstractions.7.1.2.nupkg.sha512",
        "microsoft.identitymodel.abstractions.nuspec"
      ]
    },
    "Microsoft.IdentityModel.JsonWebTokens/7.1.2": {
      "sha512": "cloLGeZolXbCJhJBc5OC05uhrdhdPL6MWHuVUnkkUvPDeK7HkwThBaLZ1XjBQVk9YhxXE2OvHXnKi0PLleXxDg==",
      "type": "package",
      "path": "microsoft.identitymodel.jsonwebtokens/7.1.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/net461/Microsoft.IdentityModel.JsonWebTokens.dll",
        "lib/net461/Microsoft.IdentityModel.JsonWebTokens.xml",
        "lib/net462/Microsoft.IdentityModel.JsonWebTokens.dll",
        "lib/net462/Microsoft.IdentityModel.JsonWebTokens.xml",
        "lib/net472/Microsoft.IdentityModel.JsonWebTokens.dll",
        "lib/net472/Microsoft.IdentityModel.JsonWebTokens.xml",
        "lib/net6.0/Microsoft.IdentityModel.JsonWebTokens.dll",
        "lib/net6.0/Microsoft.IdentityModel.JsonWebTokens.xml",
        "lib/net8.0/Microsoft.IdentityModel.JsonWebTokens.dll",
        "lib/net8.0/Microsoft.IdentityModel.JsonWebTokens.xml",
        "lib/netstandard2.0/Microsoft.IdentityModel.JsonWebTokens.dll",
        "lib/netstandard2.0/Microsoft.IdentityModel.JsonWebTokens.xml",
        "microsoft.identitymodel.jsonwebtokens.7.1.2.nupkg.sha512",
        "microsoft.identitymodel.jsonwebtokens.nuspec"
      ]
    },
    "Microsoft.IdentityModel.Logging/7.1.2": {
      "sha512": "YCxBt2EeJP8fcXk9desChkWI+0vFqFLvBwrz5hBMsoh0KJE6BC66DnzkdzkJNqMltLromc52dkdT206jJ38cTw==",
      "type": "package",
      "path": "microsoft.identitymodel.logging/7.1.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/net461/Microsoft.IdentityModel.Logging.dll",
        "lib/net461/Microsoft.IdentityModel.Logging.xml",
        "lib/net462/Microsoft.IdentityModel.Logging.dll",
        "lib/net462/Microsoft.IdentityModel.Logging.xml",
        "lib/net472/Microsoft.IdentityModel.Logging.dll",
        "lib/net472/Microsoft.IdentityModel.Logging.xml",
        "lib/net6.0/Microsoft.IdentityModel.Logging.dll",
        "lib/net6.0/Microsoft.IdentityModel.Logging.xml",
        "lib/net8.0/Microsoft.IdentityModel.Logging.dll",
        "lib/net8.0/Microsoft.IdentityModel.Logging.xml",
        "lib/netstandard2.0/Microsoft.IdentityModel.Logging.dll",
        "lib/netstandard2.0/Microsoft.IdentityModel.Logging.xml",
        "microsoft.identitymodel.logging.7.1.2.nupkg.sha512",
        "microsoft.identitymodel.logging.nuspec"
      ]
    },
    "Microsoft.IdentityModel.Protocols/7.1.2": {
      "sha512": "SydLwMRFx6EHPWJ+N6+MVaoArN1Htt92b935O3RUWPY1yUF63zEjvd3lBu79eWdZUwedP8TN2I5V9T3nackvIQ==",
      "type": "package",
      "path": "microsoft.identitymodel.protocols/7.1.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/net461/Microsoft.IdentityModel.Protocols.dll",
        "lib/net461/Microsoft.IdentityModel.Protocols.xml",
        "lib/net462/Microsoft.IdentityModel.Protocols.dll",
        "lib/net462/Microsoft.IdentityModel.Protocols.xml",
        "lib/net472/Microsoft.IdentityModel.Protocols.dll",
        "lib/net472/Microsoft.IdentityModel.Protocols.xml",
        "lib/net6.0/Microsoft.IdentityModel.Protocols.dll",
        "lib/net6.0/Microsoft.IdentityModel.Protocols.xml",
        "lib/net8.0/Microsoft.IdentityModel.Protocols.dll",
        "lib/net8.0/Microsoft.IdentityModel.Protocols.xml",
        "lib/netstandard2.0/Microsoft.IdentityModel.Protocols.dll",
        "lib/netstandard2.0/Microsoft.IdentityModel.Protocols.xml",
        "microsoft.identitymodel.protocols.7.1.2.nupkg.sha512",
        "microsoft.identitymodel.protocols.nuspec"
      ]
    },
    "Microsoft.IdentityModel.Protocols.OpenIdConnect/7.1.2": {
      "sha512": "6lHQoLXhnMQ42mGrfDkzbIOR3rzKM1W1tgTeMPLgLCqwwGw0d96xFi/UiX/fYsu7d6cD5MJiL3+4HuI8VU+sVQ==",
      "type": "package",
      "path": "microsoft.identitymodel.protocols.openidconnect/7.1.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/net461/Microsoft.IdentityModel.Protocols.OpenIdConnect.dll",
        "lib/net461/Microsoft.IdentityModel.Protocols.OpenIdConnect.xml",
        "lib/net462/Microsoft.IdentityModel.Protocols.OpenIdConnect.dll",
        "lib/net462/Microsoft.IdentityModel.Protocols.OpenIdConnect.xml",
        "lib/net472/Microsoft.IdentityModel.Protocols.OpenIdConnect.dll",
        "lib/net472/Microsoft.IdentityModel.Protocols.OpenIdConnect.xml",
        "lib/net6.0/Microsoft.IdentityModel.Protocols.OpenIdConnect.dll",
        "lib/net6.0/Microsoft.IdentityModel.Protocols.OpenIdConnect.xml",
        "lib/net8.0/Microsoft.IdentityModel.Protocols.OpenIdConnect.dll",
        "lib/net8.0/Microsoft.IdentityModel.Protocols.OpenIdConnect.xml",
        "lib/netstandard2.0/Microsoft.IdentityModel.Protocols.OpenIdConnect.dll",
        "lib/netstandard2.0/Microsoft.IdentityModel.Protocols.OpenIdConnect.xml",
        "microsoft.identitymodel.protocols.openidconnect.7.1.2.nupkg.sha512",
        "microsoft.identitymodel.protocols.openidconnect.nuspec"
      ]
    },
    "Microsoft.IdentityModel.Tokens/7.1.2": {
      "sha512": "oICJMqr3aNEDZOwnH5SK49bR6Z4aX0zEAnOLuhloumOSuqnNq+GWBdQyrgILnlcT5xj09xKCP/7Y7gJYB+ls/g==",
      "type": "package",
      "path": "microsoft.identitymodel.tokens/7.1.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/net461/Microsoft.IdentityModel.Tokens.dll",
        "lib/net461/Microsoft.IdentityModel.Tokens.xml",
        "lib/net462/Microsoft.IdentityModel.Tokens.dll",
        "lib/net462/Microsoft.IdentityModel.Tokens.xml",
        "lib/net472/Microsoft.IdentityModel.Tokens.dll",
        "lib/net472/Microsoft.IdentityModel.Tokens.xml",
        "lib/net6.0/Microsoft.IdentityModel.Tokens.dll",
        "lib/net6.0/Microsoft.IdentityModel.Tokens.xml",
        "lib/net8.0/Microsoft.IdentityModel.Tokens.dll",
        "lib/net8.0/Microsoft.IdentityModel.Tokens.xml",
        "lib/netstandard2.0/Microsoft.IdentityModel.Tokens.dll",
        "lib/netstandard2.0/Microsoft.IdentityModel.Tokens.xml",
        "microsoft.identitymodel.tokens.7.1.2.nupkg.sha512",
        "microsoft.identitymodel.tokens.nuspec"
      ]
    },
    "Microsoft.OpenApi/1.4.3": {
      "sha512": "rURwggB+QZYcSVbDr7HSdhw/FELvMlriW10OeOzjPT7pstefMo7IThhtNtDudxbXhW+lj0NfX72Ka5EDsG8x6w==",
      "type": "package",
      "path": "microsoft.openapi/1.4.3",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/netstandard2.0/Microsoft.OpenApi.dll",
        "lib/netstandard2.0/Microsoft.OpenApi.pdb",
        "lib/netstandard2.0/Microsoft.OpenApi.xml",
        "microsoft.openapi.1.4.3.nupkg.sha512",
        "microsoft.openapi.nuspec"
      ]
    },
    "Swashbuckle.AspNetCore/6.4.0": {
      "sha512": "eUBr4TW0up6oKDA5Xwkul289uqSMgY0xGN4pnbOIBqCcN9VKGGaPvHX3vWaG/hvocfGDP+MGzMA0bBBKz2fkmQ==",
      "type": "package",
      "path": "swashbuckle.aspnetcore/6.4.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "build/Swashbuckle.AspNetCore.props",
        "swashbuckle.aspnetcore.6.4.0.nupkg.sha512",
        "swashbuckle.aspnetcore.nuspec"
      ]
    },
    "Swashbuckle.AspNetCore.Swagger/6.4.0": {
      "sha512": "nl4SBgGM+cmthUcpwO/w1lUjevdDHAqRvfUoe4Xp/Uvuzt9mzGUwyFCqa3ODBAcZYBiFoKvrYwz0rabslJvSmQ==",
      "type": "package",
      "path": "swashbuckle.aspnetcore.swagger/6.4.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/net5.0/Swashbuckle.AspNetCore.Swagger.dll",
        "lib/net5.0/Swashbuckle.AspNetCore.Swagger.pdb",
        "lib/net5.0/Swashbuckle.AspNetCore.Swagger.xml",
        "lib/net6.0/Swashbuckle.AspNetCore.Swagger.dll",
        "lib/net6.0/Swashbuckle.AspNetCore.Swagger.pdb",
        "lib/net6.0/Swashbuckle.AspNetCore.Swagger.xml",
        "lib/netcoreapp3.0/Swashbuckle.AspNetCore.Swagger.dll",
        "lib/netcoreapp3.0/Swashbuckle.AspNetCore.Swagger.pdb",
        "lib/netcoreapp3.0/Swashbuckle.AspNetCore.Swagger.xml",
        "lib/netstandard2.0/Swashbuckle.AspNetCore.Swagger.dll",
        "lib/netstandard2.0/Swashbuckle.AspNetCore.Swagger.pdb",
        "lib/netstandard2.0/Swashbuckle.AspNetCore.Swagger.xml",
        "swashbuckle.aspnetcore.swagger.6.4.0.nupkg.sha512",
        "swashbuckle.aspnetcore.swagger.nuspec"
      ]
    },
    "Swashbuckle.AspNetCore.SwaggerGen/6.4.0": {
      "sha512": "lXhcUBVqKrPFAQF7e/ZeDfb5PMgE8n5t6L5B6/BQSpiwxgHzmBcx8Msu42zLYFTvR5PIqE9Q9lZvSQAcwCxJjw==",
      "type": "package",
      "path": "swashbuckle.aspnetcore.swaggergen/6.4.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/net5.0/Swashbuckle.AspNetCore.SwaggerGen.dll",
        "lib/net5.0/Swashbuckle.AspNetCore.SwaggerGen.pdb",
        "lib/net5.0/Swashbuckle.AspNetCore.SwaggerGen.xml",
        "lib/net6.0/Swashbuckle.AspNetCore.SwaggerGen.dll",
        "lib/net6.0/Swashbuckle.AspNetCore.SwaggerGen.pdb",
        "lib/net6.0/Swashbuckle.AspNetCore.SwaggerGen.xml",
        "lib/netcoreapp3.0/Swashbuckle.AspNetCore.SwaggerGen.dll",
        "lib/netcoreapp3.0/Swashbuckle.AspNetCore.SwaggerGen.pdb",
        "lib/netcoreapp3.0/Swashbuckle.AspNetCore.SwaggerGen.xml",
        "lib/netstandard2.0/Swashbuckle.AspNetCore.SwaggerGen.dll",
        "lib/netstandard2.0/Swashbuckle.AspNetCore.SwaggerGen.pdb",
        "lib/netstandard2.0/Swashbuckle.AspNetCore.SwaggerGen.xml",
        "swashbuckle.aspnetcore.swaggergen.6.4.0.nupkg.sha512",
        "swashbuckle.aspnetcore.swaggergen.nuspec"
      ]
    },
    "Swashbuckle.AspNetCore.SwaggerUI/6.4.0": {
      "sha512": "1Hh3atb3pi8c+v7n4/3N80Jj8RvLOXgWxzix6w3OZhB7zBGRwsy7FWr4e3hwgPweSBpwfElqj4V4nkjYabH9nQ==",
      "type": "package",
      "path": "swashbuckle.aspnetcore.swaggerui/6.4.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/net5.0/Swashbuckle.AspNetCore.SwaggerUI.dll",
        "lib/net5.0/Swashbuckle.AspNetCore.SwaggerUI.pdb",
        "lib/net5.0/Swashbuckle.AspNetCore.SwaggerUI.xml",
        "lib/net6.0/Swashbuckle.AspNetCore.SwaggerUI.dll",
        "lib/net6.0/Swashbuckle.AspNetCore.SwaggerUI.pdb",
        "lib/net6.0/Swashbuckle.AspNetCore.SwaggerUI.xml",
        "lib/netcoreapp3.0/Swashbuckle.AspNetCore.SwaggerUI.dll",
        "lib/netcoreapp3.0/Swashbuckle.AspNetCore.SwaggerUI.pdb",
        "lib/netcoreapp3.0/Swashbuckle.AspNetCore.SwaggerUI.xml",
        "lib/netstandard2.0/Swashbuckle.AspNetCore.SwaggerUI.dll",
        "lib/netstandard2.0/Swashbuckle.AspNetCore.SwaggerUI.pdb",
        "lib/netstandard2.0/Swashbuckle.AspNetCore.SwaggerUI.xml",
        "swashbuckle.aspnetcore.swaggerui.6.4.0.nupkg.sha512",
        "swashbuckle.aspnetcore.swaggerui.nuspec"
      ]
    },
    "System.IdentityModel.Tokens.Jwt/7.1.2": {
      "sha512": "Thhbe1peAmtSBFaV/ohtykXiZSOkx59Da44hvtWfIMFofDA3M3LaVyjstACf2rKGn4dEDR2cUpRAZ0Xs/zB+7Q==",
      "type": "package",
      "path": "system.identitymodel.tokens.jwt/7.1.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/net461/System.IdentityModel.Tokens.Jwt.dll",
        "lib/net461/System.IdentityModel.Tokens.Jwt.xml",
        "lib/net462/System.IdentityModel.Tokens.Jwt.dll",
        "lib/net462/System.IdentityModel.Tokens.Jwt.xml",
        "lib/net472/System.IdentityModel.Tokens.Jwt.dll",
        "lib/net472/System.IdentityModel.Tokens.Jwt.xml",
        "lib/net6.0/System.IdentityModel.Tokens.Jwt.dll",
        "lib/net6.0/System.IdentityModel.Tokens.Jwt.xml",
        "lib/net8.0/System.IdentityModel.Tokens.Jwt.dll",
        "lib/net8.0/System.IdentityModel.Tokens.Jwt.xml",
        "lib/netstandard2.0/System.IdentityModel.Tokens.Jwt.dll",
        "lib/netstandard2.0/System.IdentityModel.Tokens.Jwt.xml",
        "system.identitymodel.tokens.jwt.7.1.2.nupkg.sha512",
        "system.identitymodel.tokens.jwt.nuspec"
      ]
    }
  },
  "projectFileDependencyGroups": {
    "net8.0": [
      "Microsoft.AspNetCore.Authentication.JwtBearer >= 8.0.7",
      "Microsoft.AspNetCore.OpenApi >= 8.0.4",
      "Swashbuckle.AspNetCore >= 6.4.0"
    ]
  },
  "packageFolders": {
    "/Users/mariolopez/.nuget/packages/": {}
  },
  "project": {
    "version": "1.0.0",
    "restore": {
      "projectUniqueName": "/Users/mariolopez/workspace/github.com/mariolopezDev/webAppMokkilicores/MokkilicoresExpressAPI/MokkilicoresExpressAPI.csproj",
      "projectName": "MokkilicoresExpressAPI",
      "projectPath": "/Users/mariolopez/workspace/github.com/mariolopezDev/webAppMokkilicores/MokkilicoresExpressAPI/MokkilicoresExpressAPI.csproj",
      "packagesPath": "/Users/mariolopez/.nuget/packages/",
      "outputPath": "/Users/mariolopez/workspace/github.com/mariolopezDev/webAppMokkilicores/MokkilicoresExpressAPI/obj/",
      "projectStyle": "PackageReference",
      "configFilePaths": [
        "/Users/mariolopez/.nuget/NuGet/NuGet.Config"
      ],
      "originalTargetFrameworks": [
        "net8.0"
      ],
      "sources": {
        "https://api.nuget.org/v3/index.json": {}
      },
      "frameworks": {
        "net8.0": {
          "targetAlias": "net8.0",
          "projectReferences": {}
        }
      },
      "warningProperties": {
        "warnAsError": [
          "NU1605"
        ]
      },
      "restoreAuditProperties": {
        "enableAudit": "true",
        "auditLevel": "low",
        "auditMode": "direct"
      }
    },
    "frameworks": {
      "net8.0": {
        "targetAlias": "net8.0",
        "dependencies": {
          "Microsoft.AspNetCore.Authentication.JwtBearer": {
            "target": "Package",
            "version": "[8.0.7, )"
          },
          "Microsoft.AspNetCore.OpenApi": {
            "target": "Package",
            "version": "[8.0.4, )"
          },
          "Swashbuckle.AspNetCore": {
            "target": "Package",
            "version": "[6.4.0, )"
          }
        },
        "imports": [
          "net461",
          "net462",
          "net47",
          "net471",
          "net472",
          "net48",
          "net481"
        ],
        "assetTargetFallback": true,
        "warn": true,
        "frameworkReferences": {
          "Microsoft.AspNetCore.App": {
            "privateAssets": "none"
          },
          "Microsoft.NETCore.App": {
            "privateAssets": "all"
          }
        },
        "runtimeIdentifierGraphPath": "/usr/local/share/dotnet/sdk/8.0.204/PortableRuntimeIdentifierGraph.json"
      }
    }
  }
}


Filename: ./obj/MokkilicoresExpressAPI.csproj.nuget.dgspec.json
-----------------------------------
{
  "format": 1,
  "restore": {
    "/Users/mariolopez/workspace/github.com/mariolopezDev/webAppMokkilicores/MokkilicoresExpressAPI/MokkilicoresExpressAPI.csproj": {}
  },
  "projects": {
    "/Users/mariolopez/workspace/github.com/mariolopezDev/webAppMokkilicores/MokkilicoresExpressAPI/MokkilicoresExpressAPI.csproj": {
      "version": "1.0.0",
      "restore": {
        "projectUniqueName": "/Users/mariolopez/workspace/github.com/mariolopezDev/webAppMokkilicores/MokkilicoresExpressAPI/MokkilicoresExpressAPI.csproj",
        "projectName": "MokkilicoresExpressAPI",
        "projectPath": "/Users/mariolopez/workspace/github.com/mariolopezDev/webAppMokkilicores/MokkilicoresExpressAPI/MokkilicoresExpressAPI.csproj",
        "packagesPath": "/Users/mariolopez/.nuget/packages/",
        "outputPath": "/Users/mariolopez/workspace/github.com/mariolopezDev/webAppMokkilicores/MokkilicoresExpressAPI/obj/",
        "projectStyle": "PackageReference",
        "configFilePaths": [
          "/Users/mariolopez/.nuget/NuGet/NuGet.Config"
        ],
        "originalTargetFrameworks": [
          "net8.0"
        ],
        "sources": {
          "https://api.nuget.org/v3/index.json": {}
        },
        "frameworks": {
          "net8.0": {
            "targetAlias": "net8.0",
            "projectReferences": {}
          }
        },
        "warningProperties": {
          "warnAsError": [
            "NU1605"
          ]
        },
        "restoreAuditProperties": {
          "enableAudit": "true",
          "auditLevel": "low",
          "auditMode": "direct"
        }
      },
      "frameworks": {
        "net8.0": {
          "targetAlias": "net8.0",
          "dependencies": {
            "Microsoft.AspNetCore.Authentication.JwtBearer": {
              "target": "Package",
              "version": "[8.0.7, )"
            },
            "Microsoft.AspNetCore.OpenApi": {
              "target": "Package",
              "version": "[8.0.4, )"
            },
            "Swashbuckle.AspNetCore": {
              "target": "Package",
              "version": "[6.4.0, )"
            }
          },
          "imports": [
            "net461",
            "net462",
            "net47",
            "net471",
            "net472",
            "net48",
            "net481"
          ],
          "assetTargetFallback": true,
          "warn": true,
          "frameworkReferences": {
            "Microsoft.AspNetCore.App": {
              "privateAssets": "none"
            },
            "Microsoft.NETCore.App": {
              "privateAssets": "all"
            }
          },
          "runtimeIdentifierGraphPath": "/usr/local/share/dotnet/sdk/8.0.204/PortableRuntimeIdentifierGraph.json"
        }
      }
    }
  }
}


Filename: ./obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
-----------------------------------
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]



Filename: ./obj/Debug/net8.0/staticwebassets.build.json
-----------------------------------
{
  "Version": 1,
  "Hash": "+l/8l3UYnQAtIrQXCR6hiTrgr2xyHxrozqKXGGboagE=",
  "Source": "MokkilicoresExpressAPI",
  "BasePath": "_content/MokkilicoresExpressAPI",
  "Mode": "Default",
  "ManifestType": "Build",
  "ReferencedProjectsConfiguration": [],
  "DiscoveryPatterns": [],
  "Assets": []
}


Filename: ./obj/Debug/net8.0/MokkilicoresExpressAPI.AssemblyInfo.cs
-----------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("MokkilicoresExpressAPI")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+f59f22f9625e3d4552c6d6302f9fa353cd1f6099")]
[assembly: System.Reflection.AssemblyProductAttribute("MokkilicoresExpressAPI")]
[assembly: System.Reflection.AssemblyTitleAttribute("MokkilicoresExpressAPI")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.




Filename: ./obj/Debug/net8.0/MokkilicoresExpressAPI.sourcelink.json
-----------------------------------
{"documents":{"/Users/mariolopez/workspace/github.com/mariolopezDev/webAppMokkilicores/MokkilicoresExpressAPI/*":"https://raw.githubusercontent.com/mariolopezDev/MokkilicoresExpressAPI/f59f22f9625e3d4552c6d6302f9fa353cd1f6099/*"}}


Filename: ./obj/Debug/net8.0/MokkilicoresExpressAPI.GlobalUsings.g.cs
-----------------------------------
// <auto-generated/>
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;



Filename: ./obj/Debug/net8.0/MokkilicoresExpressAPI.MvcApplicationPartsAssemblyInfo.cs
-----------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Microsoft.AspNetCore.OpenApi")]
[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Swashbuckle.AspNetCore.SwaggerGen")]

// Generated by the MSBuild WriteCodeFragment class.




Filename: ./bin/Debug/net8.0/MokkilicoresExpressAPI.runtimeconfig.json
-----------------------------------
{
  "runtimeOptions": {
    "tfm": "net8.0",
    "frameworks": [
      {
        "name": "Microsoft.NETCore.App",
        "version": "8.0.0"
      },
      {
        "name": "Microsoft.AspNetCore.App",
        "version": "8.0.0"
      }
    ],
    "configProperties": {
      "System.GC.Server": true,
      "System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization": false
    }
  }
}


Filename: ./bin/Debug/net8.0/appsettings.json
-----------------------------------
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.AspNetCore": "Warning",
      "Microsoft.Hosting.Lifetime": "Information",
      "MokkilicoresExpressAPI.Controllers": "Trace"
    },
    "Console": {
      "IncludeScopes": true
    }
  },
  "AllowedHosts": "*",
  "Jwt": {
    "SecretKey": "mokkilicores-express-api-secret-key",
    "Issuer": "MokkilicoresExpressAPI",
    "Audience": "MokkilicoresExpressAPIUsers",
    "ExpiryInHours": 1
  }
}



Filename: ./bin/Debug/net8.0/MokkilicoresExpressAPI.deps.json
-----------------------------------
{
  "runtimeTarget": {
    "name": ".NETCoreApp,Version=v8.0",
    "signature": ""
  },
  "compilationOptions": {},
  "targets": {
    ".NETCoreApp,Version=v8.0": {
      "MokkilicoresExpressAPI/1.0.0": {
        "dependencies": {
          "Microsoft.AspNetCore.Authentication.JwtBearer": "8.0.7",
          "Microsoft.AspNetCore.OpenApi": "8.0.4",
          "Swashbuckle.AspNetCore": "6.4.0"
        },
        "runtime": {
          "MokkilicoresExpressAPI.dll": {}
        }
      },
      "Microsoft.AspNetCore.Authentication.JwtBearer/8.0.7": {
        "dependencies": {
          "Microsoft.IdentityModel.Protocols.OpenIdConnect": "7.1.2"
        },
        "runtime": {
          "lib/net8.0/Microsoft.AspNetCore.Authentication.JwtBearer.dll": {
            "assemblyVersion": "8.0.7.0",
            "fileVersion": "8.0.724.31402"
          }
        }
      },
      "Microsoft.AspNetCore.OpenApi/8.0.4": {
        "dependencies": {
          "Microsoft.OpenApi": "1.4.3"
        },
        "runtime": {
          "lib/net8.0/Microsoft.AspNetCore.OpenApi.dll": {
            "assemblyVersion": "8.0.4.0",
            "fileVersion": "8.0.424.17014"
          }
        }
      },
      "Microsoft.Extensions.ApiDescription.Server/6.0.5": {},
      "Microsoft.IdentityModel.Abstractions/7.1.2": {
        "runtime": {
          "lib/net8.0/Microsoft.IdentityModel.Abstractions.dll": {
            "assemblyVersion": "7.1.2.0",
            "fileVersion": "7.1.2.41121"
          }
        }
      },
      "Microsoft.IdentityModel.JsonWebTokens/7.1.2": {
        "dependencies": {
          "Microsoft.IdentityModel.Tokens": "7.1.2"
        },
        "runtime": {
          "lib/net8.0/Microsoft.IdentityModel.JsonWebTokens.dll": {
            "assemblyVersion": "7.1.2.0",
            "fileVersion": "7.1.2.41121"
          }
        }
      },
      "Microsoft.IdentityModel.Logging/7.1.2": {
        "dependencies": {
          "Microsoft.IdentityModel.Abstractions": "7.1.2"
        },
        "runtime": {
          "lib/net8.0/Microsoft.IdentityModel.Logging.dll": {
            "assemblyVersion": "7.1.2.0",
            "fileVersion": "7.1.2.41121"
          }
        }
      },
      "Microsoft.IdentityModel.Protocols/7.1.2": {
        "dependencies": {
          "Microsoft.IdentityModel.Logging": "7.1.2",
          "Microsoft.IdentityModel.Tokens": "7.1.2"
        },
        "runtime": {
          "lib/net8.0/Microsoft.IdentityModel.Protocols.dll": {
            "assemblyVersion": "7.1.2.0",
            "fileVersion": "7.1.2.41121"
          }
        }
      },
      "Microsoft.IdentityModel.Protocols.OpenIdConnect/7.1.2": {
        "dependencies": {
          "Microsoft.IdentityModel.Protocols": "7.1.2",
          "System.IdentityModel.Tokens.Jwt": "7.1.2"
        },
        "runtime": {
          "lib/net8.0/Microsoft.IdentityModel.Protocols.OpenIdConnect.dll": {
            "assemblyVersion": "7.1.2.0",
            "fileVersion": "7.1.2.41121"
          }
        }
      },
      "Microsoft.IdentityModel.Tokens/7.1.2": {
        "dependencies": {
          "Microsoft.IdentityModel.Logging": "7.1.2"
        },
        "runtime": {
          "lib/net8.0/Microsoft.IdentityModel.Tokens.dll": {
            "assemblyVersion": "7.1.2.0",
            "fileVersion": "7.1.2.41121"
          }
        }
      },
      "Microsoft.OpenApi/1.4.3": {
        "runtime": {
          "lib/netstandard2.0/Microsoft.OpenApi.dll": {
            "assemblyVersion": "1.4.3.0",
            "fileVersion": "1.4.3.0"
          }
        }
      },
      "Swashbuckle.AspNetCore/6.4.0": {
        "dependencies": {
          "Microsoft.Extensions.ApiDescription.Server": "6.0.5",
          "Swashbuckle.AspNetCore.Swagger": "6.4.0",
          "Swashbuckle.AspNetCore.SwaggerGen": "6.4.0",
          "Swashbuckle.AspNetCore.SwaggerUI": "6.4.0"
        }
      },
      "Swashbuckle.AspNetCore.Swagger/6.4.0": {
        "dependencies": {
          "Microsoft.OpenApi": "1.4.3"
        },
        "runtime": {
          "lib/net6.0/Swashbuckle.AspNetCore.Swagger.dll": {
            "assemblyVersion": "6.4.0.0",
            "fileVersion": "6.4.0.0"
          }
        }
      },
      "Swashbuckle.AspNetCore.SwaggerGen/6.4.0": {
        "dependencies": {
          "Swashbuckle.AspNetCore.Swagger": "6.4.0"
        },
        "runtime": {
          "lib/net6.0/Swashbuckle.AspNetCore.SwaggerGen.dll": {
            "assemblyVersion": "6.4.0.0",
            "fileVersion": "6.4.0.0"
          }
        }
      },
      "Swashbuckle.AspNetCore.SwaggerUI/6.4.0": {
        "runtime": {
          "lib/net6.0/Swashbuckle.AspNetCore.SwaggerUI.dll": {
            "assemblyVersion": "6.4.0.0",
            "fileVersion": "6.4.0.0"
          }
        }
      },
      "System.IdentityModel.Tokens.Jwt/7.1.2": {
        "dependencies": {
          "Microsoft.IdentityModel.JsonWebTokens": "7.1.2",
          "Microsoft.IdentityModel.Tokens": "7.1.2"
        },
        "runtime": {
          "lib/net8.0/System.IdentityModel.Tokens.Jwt.dll": {
            "assemblyVersion": "7.1.2.0",
            "fileVersion": "7.1.2.41121"
          }
        }
      }
    }
  },
  "libraries": {
    "MokkilicoresExpressAPI/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "Microsoft.AspNetCore.Authentication.JwtBearer/8.0.7": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-HXcmJizLBx9mP2XtHZZgvi3GZCrGg98PMQ9AozrF1/RqSffp9CqCiTdrz7TaFLqOUph/S4hqx/IJD18Al+zE+w==",
      "path": "microsoft.aspnetcore.authentication.jwtbearer/8.0.7",
      "hashPath": "microsoft.aspnetcore.authentication.jwtbearer.8.0.7.nupkg.sha512"
    },
    "Microsoft.AspNetCore.OpenApi/8.0.4": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-TFiXbP0tqRgJKcpiCSSp79q6QaiF8gqRhZgrU48FQajhVkiwHSp1O1b1hkYC4Ehl4clbk3pHwdfwN9mRtDAFbQ==",
      "path": "microsoft.aspnetcore.openapi/8.0.4",
      "hashPath": "microsoft.aspnetcore.openapi.8.0.4.nupkg.sha512"
    },
    "Microsoft.Extensions.ApiDescription.Server/6.0.5": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-Ckb5EDBUNJdFWyajfXzUIMRkhf52fHZOQuuZg/oiu8y7zDCVwD0iHhew6MnThjHmevanpxL3f5ci2TtHQEN6bw==",
      "path": "microsoft.extensions.apidescription.server/6.0.5",
      "hashPath": "microsoft.extensions.apidescription.server.6.0.5.nupkg.sha512"
    },
    "Microsoft.IdentityModel.Abstractions/7.1.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-33eTIA2uO/L9utJjZWbKsMSVsQf7F8vtd6q5mQX7ZJzNvCpci5fleD6AeANGlbbb7WX7XKxq9+Dkb5e3GNDrmQ==",
      "path": "microsoft.identitymodel.abstractions/7.1.2",
      "hashPath": "microsoft.identitymodel.abstractions.7.1.2.nupkg.sha512"
    },
    "Microsoft.IdentityModel.JsonWebTokens/7.1.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-cloLGeZolXbCJhJBc5OC05uhrdhdPL6MWHuVUnkkUvPDeK7HkwThBaLZ1XjBQVk9YhxXE2OvHXnKi0PLleXxDg==",
      "path": "microsoft.identitymodel.jsonwebtokens/7.1.2",
      "hashPath": "microsoft.identitymodel.jsonwebtokens.7.1.2.nupkg.sha512"
    },
    "Microsoft.IdentityModel.Logging/7.1.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-YCxBt2EeJP8fcXk9desChkWI+0vFqFLvBwrz5hBMsoh0KJE6BC66DnzkdzkJNqMltLromc52dkdT206jJ38cTw==",
      "path": "microsoft.identitymodel.logging/7.1.2",
      "hashPath": "microsoft.identitymodel.logging.7.1.2.nupkg.sha512"
    },
    "Microsoft.IdentityModel.Protocols/7.1.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-SydLwMRFx6EHPWJ+N6+MVaoArN1Htt92b935O3RUWPY1yUF63zEjvd3lBu79eWdZUwedP8TN2I5V9T3nackvIQ==",
      "path": "microsoft.identitymodel.protocols/7.1.2",
      "hashPath": "microsoft.identitymodel.protocols.7.1.2.nupkg.sha512"
    },
    "Microsoft.IdentityModel.Protocols.OpenIdConnect/7.1.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-6lHQoLXhnMQ42mGrfDkzbIOR3rzKM1W1tgTeMPLgLCqwwGw0d96xFi/UiX/fYsu7d6cD5MJiL3+4HuI8VU+sVQ==",
      "path": "microsoft.identitymodel.protocols.openidconnect/7.1.2",
      "hashPath": "microsoft.identitymodel.protocols.openidconnect.7.1.2.nupkg.sha512"
    },
    "Microsoft.IdentityModel.Tokens/7.1.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-oICJMqr3aNEDZOwnH5SK49bR6Z4aX0zEAnOLuhloumOSuqnNq+GWBdQyrgILnlcT5xj09xKCP/7Y7gJYB+ls/g==",
      "path": "microsoft.identitymodel.tokens/7.1.2",
      "hashPath": "microsoft.identitymodel.tokens.7.1.2.nupkg.sha512"
    },
    "Microsoft.OpenApi/1.4.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-rURwggB+QZYcSVbDr7HSdhw/FELvMlriW10OeOzjPT7pstefMo7IThhtNtDudxbXhW+lj0NfX72Ka5EDsG8x6w==",
      "path": "microsoft.openapi/1.4.3",
      "hashPath": "microsoft.openapi.1.4.3.nupkg.sha512"
    },
    "Swashbuckle.AspNetCore/6.4.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-eUBr4TW0up6oKDA5Xwkul289uqSMgY0xGN4pnbOIBqCcN9VKGGaPvHX3vWaG/hvocfGDP+MGzMA0bBBKz2fkmQ==",
      "path": "swashbuckle.aspnetcore/6.4.0",
      "hashPath": "swashbuckle.aspnetcore.6.4.0.nupkg.sha512"
    },
    "Swashbuckle.AspNetCore.Swagger/6.4.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-nl4SBgGM+cmthUcpwO/w1lUjevdDHAqRvfUoe4Xp/Uvuzt9mzGUwyFCqa3ODBAcZYBiFoKvrYwz0rabslJvSmQ==",
      "path": "swashbuckle.aspnetcore.swagger/6.4.0",
      "hashPath": "swashbuckle.aspnetcore.swagger.6.4.0.nupkg.sha512"
    },
    "Swashbuckle.AspNetCore.SwaggerGen/6.4.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-lXhcUBVqKrPFAQF7e/ZeDfb5PMgE8n5t6L5B6/BQSpiwxgHzmBcx8Msu42zLYFTvR5PIqE9Q9lZvSQAcwCxJjw==",
      "path": "swashbuckle.aspnetcore.swaggergen/6.4.0",
      "hashPath": "swashbuckle.aspnetcore.swaggergen.6.4.0.nupkg.sha512"
    },
    "Swashbuckle.AspNetCore.SwaggerUI/6.4.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-1Hh3atb3pi8c+v7n4/3N80Jj8RvLOXgWxzix6w3OZhB7zBGRwsy7FWr4e3hwgPweSBpwfElqj4V4nkjYabH9nQ==",
      "path": "swashbuckle.aspnetcore.swaggerui/6.4.0",
      "hashPath": "swashbuckle.aspnetcore.swaggerui.6.4.0.nupkg.sha512"
    },
    "System.IdentityModel.Tokens.Jwt/7.1.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-Thhbe1peAmtSBFaV/ohtykXiZSOkx59Da44hvtWfIMFofDA3M3LaVyjstACf2rKGn4dEDR2cUpRAZ0Xs/zB+7Q==",
      "path": "system.identitymodel.tokens.jwt/7.1.2",
      "hashPath": "system.identitymodel.tokens.jwt.7.1.2.nupkg.sha512"
    }
  }
}


Filename: ./bin/Debug/net8.0/appsettings.Development.json
-----------------------------------
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}



Filename: ./appsettings.json
-----------------------------------
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.AspNetCore": "Warning",
      "Microsoft.Hosting.Lifetime": "Information",
      "MokkilicoresExpressAPI.Controllers": "Trace"
    },
    "Console": {
      "IncludeScopes": true
    }
  },
  "AllowedHosts": "*",
  "Jwt": {
    "SecretKey": "mokkilicores-express-api-secret-key",
    "Issuer": "MokkilicoresExpressAPI",
    "Audience": "MokkilicoresExpressAPIUsers",
    "ExpiryInHours": 1
  }
}



Filename: ./Models/LoginRequest.cs
-----------------------------------
namespace MokkilicoresExpressAPI.Models
{
    public class LoginRequest
    {
        public string Identificacion { get; set; }
        public string Password { get; set; }
    }

    public class LoginResponse
    {
        public string Token { get; set; }
        public string Identificacion { get; set; }
        public string Role { get; set; }
    }
}



Filename: ./Models/Direccion.cs
-----------------------------------
namespace MokkilicoresExpressAPI.Models
{
    public class Direccion
    {
        public int Id { get; set; }
        public int ClienteId { get; set; }
        public string Provincia { get; set; } = string.Empty;
        public string Canton { get; set; } = string.Empty;
        public string Distrito { get; set; } = string.Empty;
        public string PuntoEnWaze { get; set; } = string.Empty;
        public bool EsCondominio { get; set; }
        public bool EsPrincipal { get; set; }
    }
}



Filename: ./Models/Cliente.cs
-----------------------------------
namespace MokkilicoresExpressAPI.Models
{
    public class Cliente
    {
        public int Id { get; set; }
        public string Identificacion { get; set; } = string.Empty;
        public string Nombre { get; set; } = string.Empty;
        public string Apellido { get; set; } = string.Empty;
        public string Provincia { get; set; } = string.Empty;
        public string Canton { get; set; } = string.Empty;
        public string Distrito { get; set; } = string.Empty;
        public decimal DineroCompradoTotal { get; set; }
        public decimal DineroCompradoUltimoAno { get; set; }
        public decimal DineroCompradoUltimos6Meses { get; set; }
    }
}



Filename: ./Models/Pedido.cs
-----------------------------------
namespace MokkilicoresExpressAPI.Models
{
    public class Pedido
    {
        public int Id { get; set; }
        public int ClienteId { get; set; }
        //public Cliente? Cliente { get; set; } // No obligatorio para la creación
        public int InventarioId { get; set; }
        //public Inventario? Inventario { get; set; } // No obligatorio para la creación
        public int Cantidad { get; set; }
        public decimal CostoSinIVA { get; set; }
        public decimal CostoTotal { get; set; }
        public string Estado { get; set; } = string.Empty;
    }
}



Filename: ./Models/Inventario.cs
-----------------------------------
namespace MokkilicoresExpressAPI.Models
{
    public class Inventario
    {
        public int Id { get; set; }
        public int CantidadEnExistencia { get; set; }
        public int BodegaId { get; set; }
        public DateTime FechaIngreso { get; set; }
        public DateTime FechaVencimiento { get; set; }
        public string TipoLicor { get; set; } = string.Empty;
    }
}



Filename: ./Properties/launchSettings.json
-----------------------------------
﻿{
  "$schema": "http://json.schemastore.org/launchsettings.json",
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:58689",
      "sslPort": 44347
    }
  },
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "launchUrl": "swagger",
      "applicationUrl": "http://localhost:5045",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "https": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "launchUrl": "swagger",
      "applicationUrl": "https://localhost:7275;http://localhost:5045",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "launchUrl": "swagger",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}



Filename: ./appsettings.Development.json
-----------------------------------
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}



Filename: ./Controllers/DireccionController.cs
-----------------------------------
using Microsoft.AspNetCore.Mvc;
using MokkilicoresExpressAPI.Models;
using Microsoft.Extensions.Caching.Memory;

namespace MokkilicoresExpressAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class DireccionController : ControllerBase
    {
        private readonly IMemoryCache _cache;
        private const string CacheKey = "Direcciones";

        public DireccionController(IMemoryCache cache)
        {
            _cache = cache;
        }

        [HttpGet]
        public ActionResult<IEnumerable<Direccion>> Get()
        {
            if (!_cache.TryGetValue(CacheKey, out List<Direccion> direcciones))
            {
                direcciones = new List<Direccion>();
                _cache.Set(CacheKey, direcciones);
            }
            return Ok(direcciones);
        }

        [HttpGet("{id}")]
        public ActionResult<Direccion> Get(int id)
        {
            var direcciones = _cache.Get<List<Direccion>>(CacheKey);
            var direccion = direcciones?.FirstOrDefault(d => d.Id == id);
            if (direccion == null)
                return NotFound();
            return Ok(direccion);
        }

        [HttpPost]
        public ActionResult Post([FromBody] Direccion direccion)
        {
            var direcciones = _cache.Get<List<Direccion>>(CacheKey) ?? new List<Direccion>();
            direccion.Id = direcciones.Count > 0 ? direcciones.Max(d => d.Id) + 1 : 1;
            direcciones.Add(direccion);
            _cache.Set(CacheKey, direcciones);
            return CreatedAtAction(nameof(Get), new { id = direccion.Id }, direccion);
        }

        [HttpPut("{id}")]
        public ActionResult Put(int id, [FromBody] Direccion updatedDireccion)
        {
            var direcciones = _cache.Get<List<Direccion>>(CacheKey);
            var direccion = direcciones?.FirstOrDefault(d => d.Id == id);
            if (direccion == null)
                return NotFound();
            direccion.ClienteId = updatedDireccion.ClienteId;
            direccion.Provincia = updatedDireccion.Provincia;
            direccion.Canton = updatedDireccion.Canton;
            direccion.Distrito = updatedDireccion.Distrito;
            direccion.PuntoEnWaze = updatedDireccion.PuntoEnWaze;
            direccion.EsCondominio = updatedDireccion.EsCondominio;
            direccion.EsPrincipal = updatedDireccion.EsPrincipal;
            _cache.Set(CacheKey, direcciones);
            return NoContent();
        }

        [HttpDelete("{id}")]
        public ActionResult Delete(int id)
        {
            var direcciones = _cache.Get<List<Direccion>>(CacheKey);
            var direccion = direcciones?.FirstOrDefault(d => d.Id == id);
            if (direccion == null)
                return NotFound();
            direcciones.Remove(direccion);
            _cache.Set(CacheKey, direcciones);
            return NoContent();
        }

        [HttpGet("Cliente/{clienteId}")]
        public ActionResult<IEnumerable<Direccion>> GetDireccionesPorCliente(int clienteId)
        {
            var direcciones = _cache.Get<List<Direccion>>(CacheKey)?.Where(d => d.ClienteId == clienteId).ToList();
            return Ok(direcciones);
        }
    }
}



Filename: ./Controllers/InventarioController.cs
-----------------------------------
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;
using MokkilicoresExpressAPI.Models;
using System.Collections.Generic;
using System.Linq;

namespace MokkilicoresExpressAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class InventarioController : ControllerBase
    {
        private readonly IMemoryCache _cache;
        private const string CacheKey = "Inventarios";

        public InventarioController(IMemoryCache cache)
        {
            _cache = cache;
        }

        [HttpGet]
        public ActionResult<IEnumerable<Inventario>> Get()
        {
            var inventarios = _cache.GetOrCreate(CacheKey, entry => new List<Inventario>());
            return Ok(inventarios);
        }

        [HttpGet("{id}")]
        public ActionResult<Inventario> Get(int id)
        {
            var inventarios = _cache.Get<List<Inventario>>(CacheKey);
            var inventario = inventarios?.FirstOrDefault(i => i.Id == id);
            if (inventario == null)
                return NotFound(new { Message = $"Inventario con ID {id} no encontrado" });
            return Ok(inventario);
        }

        //[Authorize]
        [HttpPost]
        public ActionResult Post([FromBody] Inventario inventario)
        {
            if (inventario == null)
                return BadRequest(new { Message = "Inventario no puede ser nulo" });

            if (string.IsNullOrEmpty(inventario.TipoLicor))
                return BadRequest(new { Message = "Tipo de licor es un campo requerido" });

            var inventarios = _cache.GetOrCreate(CacheKey, entry => new List<Inventario>());
            inventario.Id = inventarios.Count > 0 ? inventarios.Max(i => i.Id) + 1 : 1;
            inventarios.Add(inventario);
            _cache.Set(CacheKey, inventarios);
            return CreatedAtAction(nameof(Get), new { id = inventario.Id }, inventario);
        }

        //[Authorize]
        [HttpPut("{id}")]
        public ActionResult Put(int id, [FromBody] Inventario updatedInventario)
        {
            if (updatedInventario == null)
                return BadRequest(new { Message = "Inventario no puede ser nulo" });

            var inventarios = _cache.Get<List<Inventario>>(CacheKey);
            var inventario = inventarios?.FirstOrDefault(i => i.Id == id);
            if (inventario == null)
                return NotFound(new { Message = $"Inventario con ID {id} no encontrado" });

            if (string.IsNullOrEmpty(updatedInventario.TipoLicor))
                return BadRequest(new { Message = "Tipo de licor es un campo requerido" });

            inventario.CantidadEnExistencia = updatedInventario.CantidadEnExistencia;
            inventario.BodegaId = updatedInventario.BodegaId;
            inventario.FechaIngreso = updatedInventario.FechaIngreso;
            inventario.FechaVencimiento = updatedInventario.FechaVencimiento;
            inventario.TipoLicor = updatedInventario.TipoLicor;
            _cache.Set(CacheKey, inventarios);
            return NoContent();
        }

        [Authorize(Roles = "Admin")]
        [HttpDelete("{id}")]
        public ActionResult Delete(int id)
        {
            var inventarios = _cache.Get<List<Inventario>>(CacheKey);
            var inventario = inventarios?.FirstOrDefault(i => i.Id == id);
            if (inventario == null)
                return NotFound(new { Message = $"Inventario con ID {id} no encontrado" });

            inventarios.Remove(inventario);
            _cache.Set(CacheKey, inventarios);
            return NoContent();
        }
    }
}



Filename: ./Controllers/AccountController.cs
-----------------------------------
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;
using MokkilicoresExpressAPI.Models;
using MokkilicoresExpressAPI.Services;
using System.Collections.Generic;
using System.Linq;

namespace MokkilicoresExpressAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AccountController : ControllerBase
    {
        private readonly IMemoryCache _cache;
        private readonly ITokenService _tokenService;
        private const string ClienteCacheKey = "Clientes";

        public AccountController(IMemoryCache cache, ITokenService tokenService)
        {
            _cache = cache;
            _tokenService = tokenService;
        }

        [HttpPost("login")]
        public IActionResult Login([FromBody] LoginRequest loginRequest)
        {
            if (loginRequest.Identificacion == "admin" && loginRequest.Password == "admin")
            {
                return Ok(new LoginResponse { Token = _tokenService.GenerateJwtToken("admin", "Admin"), Identificacion = "admin", Role = "Admin" });
            }

            var clientes = _cache.Get<List<Cliente>>(ClienteCacheKey);
            var cliente = clientes?.FirstOrDefault(c => c.Identificacion == loginRequest.Identificacion);
            if (cliente == null || !ValidatePassword(cliente, loginRequest.Password))
            {
                return Unauthorized(new { Message = "Credenciales inválidas" });
            }

            return Ok(new LoginResponse { Token = _tokenService.GenerateJwtToken(cliente.Identificacion, "User"), Identificacion = cliente.Identificacion, Role = "User" });
        }

        private bool ValidatePassword(Cliente cliente, string password)
        {
            var expectedPassword = $"{cliente.Identificacion}{cliente.Nombre.Substring(0, 2).ToLower()}{cliente.Apellido[0].ToString().ToUpper()}";
            return password == expectedPassword;
        }
    }
}



Filename: ./Controllers/ClienteController.cs
-----------------------------------
using Microsoft.AspNetCore.Mvc;
using MokkilicoresExpressAPI.Models;
using Microsoft.Extensions.Caching.Memory;

namespace MokkilicoresExpressAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ClienteController : ControllerBase
    {
        private readonly IMemoryCache _cache;
        private const string CacheKey = "Clientes";

        public ClienteController(IMemoryCache cache)
        {
            _cache = cache;
        }

        [HttpGet]
        public ActionResult<IEnumerable<Cliente>> Get()
        {
            if (!_cache.TryGetValue(CacheKey, out List<Cliente> clientes))
            {
                clientes = new List<Cliente>();
                _cache.Set(CacheKey, clientes);
            }
            return Ok(clientes);
        }

        [HttpGet("{id}")]
        public ActionResult<Cliente> Get(int id)
        {
            var clientes = _cache.Get<List<Cliente>>(CacheKey);
            var cliente = clientes?.FirstOrDefault(c => c.Id == id);
            if (cliente == null)
                return NotFound();
            return Ok(cliente);
        }

        [HttpPost]
        public ActionResult Post([FromBody] Cliente cliente)
        {
            var clientes = _cache.Get<List<Cliente>>(CacheKey);
            cliente.Id = clientes.Count > 0 ? clientes.Max(c => c.Id) + 1 : 1;
            clientes.Add(cliente);
            _cache.Set(CacheKey, clientes);
            return CreatedAtAction(nameof(Get), new { id = cliente.Id }, cliente);
        }

        [HttpPut("{id}")]
        public ActionResult Put(int id, [FromBody] Cliente updatedCliente)
        {
            var clientes = _cache.Get<List<Cliente>>(CacheKey);
            var cliente = clientes?.FirstOrDefault(c => c.Id == id);
            if (cliente == null)
                return NotFound();
            cliente.Nombre = updatedCliente.Nombre;
            cliente.Apellido = updatedCliente.Apellido;
            cliente.Provincia = updatedCliente.Provincia;
            cliente.Canton = updatedCliente.Canton;
            cliente.Distrito = updatedCliente.Distrito;
            cliente.DineroCompradoTotal = updatedCliente.DineroCompradoTotal;
            cliente.DineroCompradoUltimoAno = updatedCliente.DineroCompradoUltimoAno;
            cliente.DineroCompradoUltimos6Meses = updatedCliente.DineroCompradoUltimos6Meses;
            _cache.Set(CacheKey, clientes);
            return NoContent();
        }

        [HttpDelete("{id}")]
        public ActionResult Delete(int id)
        {
            var clientes = _cache.Get<List<Cliente>>(CacheKey);
            var cliente = clientes?.FirstOrDefault(c => c.Id == id);
            if (cliente == null)
                return NotFound();
            clientes.Remove(cliente);
            _cache.Set(CacheKey, clientes);
            return NoContent();
        }

    }
}



Filename: ./Controllers/HomeController.cs
-----------------------------------
using Microsoft.AspNetCore.Mvc;

namespace MokkilicoresExpressAPI.Controllers
{
    [Route("home")]
    public class HomeController : Controller
    {
        [HttpGet]
        public IActionResult Index()
        {
            return Content("Bienvenido a Mokkilicores Express API");
        }
    }
}



Filename: ./Controllers/PedidoController.cs
-----------------------------------
using Microsoft.AspNetCore.Mvc;
using MokkilicoresExpressAPI.Models;
using Microsoft.Extensions.Caching.Memory;
using System.Text.Json;

namespace MokkilicoresExpressAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class PedidoController : ControllerBase
    {
        private readonly IMemoryCache _cache;
        private readonly ILogger<PedidoController> _logger;
        private const string CacheKey = "Pedidos";
        private const string ClientesCacheKey = "Clientes";
        private const string InventariosCacheKey = "Inventarios";

        public PedidoController(IMemoryCache cache, ILogger<PedidoController> logger)
        {
            _cache = cache;
            _logger = logger;
        }

        [HttpGet]
        public ActionResult<IEnumerable<Pedido>> Get()
        {
            if (!_cache.TryGetValue(CacheKey, out List<Pedido> pedidos))
            {
                pedidos = new List<Pedido>();
                _cache.Set(CacheKey, pedidos);
            }

            _logger.LogDebug("Get Pedidos llamado. Pedidos: {pedidos}", pedidos);
            return Ok(pedidos);
        }

        [HttpGet("{id}")]
        public ActionResult<Pedido> Get(int id)
        {
            var pedidos = _cache.Get<List<Pedido>>(CacheKey);
            var pedido = pedidos?.FirstOrDefault(p => p.Id == id);
            if (pedido == null)
            {
                _logger.LogWarning("Pedido with id {PedidoId} not found.", id);
                return NotFound();
            }

            _logger.LogDebug("Get Pedido llamado con id {PedidoId}. Pedido: {pedido}", id, pedido);
            return Ok(pedido);
        }

        [HttpPost]
        public ActionResult Post([FromBody] Pedido pedido)
        {
            // Logging para ver los datos recibidos
            _logger.LogDebug("Datos recibidos: {PedidoData}", JsonSerializer.Serialize(pedido));

            var pedidos = _cache.Get<List<Pedido>>(CacheKey) ?? new List<Pedido>();
            pedido.Id = pedidos.Count > 0 ? pedidos.Max(p => p.Id) + 1 : 1;
            pedido.CostoTotal = pedido.CostoSinIVA * 1.13M; // Calcular el costo total

            // Load related data
            var clientes = _cache.Get<List<Cliente>>(ClientesCacheKey) ?? new List<Cliente>();
            var inventarios = _cache.Get<List<Inventario>>(InventariosCacheKey) ?? new List<Inventario>();

            var cliente = clientes.FirstOrDefault(c => c.Id == pedido.ClienteId);
            var inventario = inventarios.FirstOrDefault(i => i.Id == pedido.InventarioId);

            if (cliente == null || inventario == null)
            {
                _logger.LogError("Error: Cliente o Inventario no encontrados.");
                return BadRequest("Cliente o Inventario no encontrados.");
            }

            pedidos.Add(pedido);
            _logger.LogInformation("Pedido creado exitosamente con id {PedidoId}.", pedido.Id);
            _cache.Set(CacheKey, pedidos);
            return CreatedAtAction(nameof(Get), new { id = pedido.Id }, pedido);
        }

        [HttpPut("{id}")]
        public ActionResult Put(int id, [FromBody] Pedido updatedPedido)
        {
            // Logging para ver los datos recibidos
            _logger.LogDebug("Datos recibidos para actualización: {PedidoData}", JsonSerializer.Serialize(updatedPedido));

            var pedidos = _cache.Get<List<Pedido>>(CacheKey);
            var pedido = pedidos?.FirstOrDefault(p => p.Id == id);
            if (pedido == null)
            {
                _logger.LogWarning("Pedido with id {PedidoId} not found.", id);
                return NotFound();
            }

            pedido.ClienteId = updatedPedido.ClienteId;
            pedido.InventarioId = updatedPedido.InventarioId;
            pedido.Cantidad = updatedPedido.Cantidad;
            pedido.CostoSinIVA = updatedPedido.CostoSinIVA;
            pedido.CostoTotal = updatedPedido.CostoSinIVA * 1.13M; // Calcular el costo total
            pedido.Estado = updatedPedido.Estado;

            // Load related data
            var clientes = _cache.Get<List<Cliente>>(ClientesCacheKey) ?? new List<Cliente>();
            var inventarios = _cache.Get<List<Inventario>>(InventariosCacheKey) ?? new List<Inventario>();

            var cliente = clientes.FirstOrDefault(c => c.Id == pedido.ClienteId);
            var inventario = inventarios.FirstOrDefault(i => i.Id == pedido.InventarioId);

            if (cliente == null || inventario == null)
            {
                _logger.LogError("Error: Cliente o Inventario no encontrados.");
                return BadRequest("Cliente o Inventario no encontrados.");
            }

            _logger.LogInformation("Pedido actualizado exitosamente con id {PedidoId}.", id);
            _cache.Set(CacheKey, pedidos);
            return NoContent();
        }

        [HttpDelete("{id}")]
        public ActionResult Delete(int id)
        {
            var pedidos = _cache.Get<List<Pedido>>(CacheKey);
            var pedido = pedidos?.FirstOrDefault(p => p.Id == id);
            if (pedido == null)
            {
                _logger.LogWarning("Pedido with id {PedidoId} not found.", id);
                return NotFound();
            }

            pedidos.Remove(pedido);
            _logger.LogInformation("Pedido eliminado exitosamente con id {PedidoId}.", id);
            _cache.Set(CacheKey, pedidos);
            return NoContent();
        }
    }
}



Filename: ./Services/ITokenService.cs
-----------------------------------
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace MokkilicoresExpressAPI.Services
{
    public interface ITokenService
    {
        string GenerateJwtToken(string identificacion, string role);
    }

    public class TokenService : ITokenService
    {
        private readonly string _secretKey;

        public TokenService(IConfiguration configuration)
        {
            _secretKey = configuration["Jwt:SecretKey"];
        }

        public string GenerateJwtToken(string identificacion, string role)
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes(_secretKey);
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new[]
                {
                    new Claim(ClaimTypes.NameIdentifier, identificacion),
                    new Claim(ClaimTypes.Role, role)
                }),
                Expires = DateTime.UtcNow.AddHours(1),
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
            };
            var token = tokenHandler.CreateToken(tokenDescriptor);
            return tokenHandler.WriteToken(token);
        }
    }
}



Filename: ./Program.cs
-----------------------------------
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using Microsoft.Extensions.Caching.Memory;
using MokkilicoresExpressAPI.Models;
using MokkilicoresExpressAPI.Services;

var builder = WebApplication.CreateBuilder(args);

// Configurar servicios
builder.Services.AddControllers();
    // Registro del servicio ITokenService
    builder.Services.AddSingleton<ITokenService, TokenService>();

    // Registro de IMemoryCache
    builder.Services.AddMemoryCache();

// Configurar proveedores de logging
builder.Logging.ClearProviders();
builder.Logging.AddConsole();
builder.Logging.AddDebug();
builder.Logging.AddEventSourceLogger();

builder.Services.AddRazorPages();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

// Configurar autenticación con JWT
var key = Encoding.ASCII.GetBytes("mokkilicores");
builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
})
.AddJwtBearer(options =>
{
    options.RequireHttpsMetadata = false;
    options.SaveToken = true;
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuerSigningKey = true,
        IssuerSigningKey = new SymmetricSecurityKey(key),
        ValidateIssuer = false,
        ValidateAudience = false
    };
});

// Configurar autorización
builder.Services.AddAuthorization(options =>
{
    options.AddPolicy("AdminPolicy", policy => policy.RequireRole("Admin"));
    options.AddPolicy("UserPolicy", policy => policy.RequireRole("User"));
});

var app = builder.Build();

// Configurar el pipeline HTTP
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseRouting();

app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();

InitializeCache(app.Services);

app.Run();

void InitializeCache(IServiceProvider services)
{
    var cache = services.GetRequiredService<IMemoryCache>();
    const string ClienteCacheKey = "Clientes";

    if (!cache.TryGetValue(ClienteCacheKey, out List<Cliente> _))
    {
        List<Cliente> initialClientes = new List<Cliente>
        {
            new Cliente { Identificacion = "023456789", Nombre = "Mario", Apellido = "Lopez", Provincia = "Cartago", Canton = "La Union", Distrito = "Tres Rios" },
            new Cliente { Identificacion = "admin", Nombre = "Admin", Apellido = "Admin", Provincia = "_", Canton = "_", Distrito = "_"}
        };
        cache.Set(ClienteCacheKey, initialClientes, new MemoryCacheEntryOptions().SetSlidingExpiration(TimeSpan.FromMinutes(60)));
    }
}



